% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perform.nn.v1.R
\name{perform.nn.v1}
\alias{perform.nn.v1}
\title{Performs Scanpy nearest neighbour algorithm}
\usage{
perform.nn.v1(
  object,
  assay,
  reduction,
  neighbour.name.suffix = "",
  n_neighbors = 15,
  dims = 0,
  random_state = 0,
  method = "umap",
  metric = "euclidean",
  generate.diffmap = FALSE,
  n_comps = 15,
  diffmap.name.suffix = ""
)
}
\arguments{
\item{object}{IBRAP S4 class object}

\item{assay}{Character. String containing indicating which assay to use}

\item{reduction}{Character. String defining which reduction to supply to the clustering algorithm.}

\item{n_neighbors}{Numerical. How many neighbours should be found per cell, a higher value typically achieves more accurate results. Default = 15}

\item{dims}{Numerical. How many components of the reduction should be used, 0 means that all will be used. Default = 0}

\item{random_state}{Numerical. The seed value to use. Default = 0}

\item{method}{Character. String indicating which methodology to use including: ‘umap’, ‘gauss’ or ‘rapids’}

\item{metric}{Character. String indicating which distance metric to use, including: ‘braycurtis’, ‘canberra’, ‘chebyshev’, ‘correlation’, ‘dice’, ‘hamming’, ‘jaccard’, ‘kulsinski’, ‘mahalanobis’, ‘minkowski’, ‘rogerstanimoto’, ‘russellrao’, ‘seuclidean’, ‘sokalmichener’, ‘sokalsneath’, ‘sqeuclidean’, ‘yule’, ‘cityblock’, ‘cosine’, ‘euclidean’, ‘l1’, ‘l2’ or ‘manhattan’}

\item{generate.diffmap}{Boolean. Should diffusion maps be generated from the neighourhood graphs, these will be stored in computational_reductions and can be used for umap generation and further neighbourhood generation. Default = TRUE}

\item{n_comps}{Numerical. How many components should be generated for the diffusion maps. Default = 15}

\item{neighbour.name}{Character. String defining the names to store the neighbourhood graph results under.}

\item{diffmap.name}{Character. What should the diffusion maps be named.}
}
\description{
Neighbourhood graph generator utilised by Scanpy
}
\examples{

# generates a diffusion map
object <- perform.nn.v1(object = object, assay = c('SCT', 'SCRAN', 'SCANPY'), 
                        reduction = c('pca_harmony','scanorama'),
                        dims = list(0,0), generate.diffmap = T)
                        
# does not generates a diffusion map
object <- perform.nn.v1(object = object, assay = c('SCT', 'SCRAN', 'SCANPY'), 
                        reduction = c('pca_harmony','scanorama'),
                        dims = list(0,0))

}
