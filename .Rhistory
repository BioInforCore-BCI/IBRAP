expr <- t(expr[features,])
old.names <- colnames(expr)
result <- cbind(expr, assignment[,column])
colnames(result) <- c(old.names, 'variable')
result <- as.data.frame(result)
df <- result[1:length(unique(result$variable)),]
df[,ncol(df)] <- unique(result$variable)
count <- 1
for(x in df[,ncol(df)]) {
sub_result <- result[result$variable == x,]
apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
count <- count + 1
}
df
rownames(df) <- NULL
df
t(df)
df
df
df$variable
t(df)
apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
t(apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean))
t(t(apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)))
t(t(apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)))[,'cluster']
t(t(apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)))[,'cluster'] <- x
s <- t(t(apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)))
s[,'cluster'] <- x
s
s[,'genes'] <- rownames(s)
s
class(df)
df[,2] <- rownames(df)
df
s
s[,2] <- rownames(s)
s
s[,2] <- s[,1]
cbind(s, rownames(s))
s <- cbind(s, rownames(s))
s[,1] <- as.numeric(s[,1])
s
s[1,1]
s <- t(t(apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)))
s
s
s$1
s[,1]
class(s[,1])
rbind(s, x)
cbind(s, x)
s <- cbind(s, x)
s
s[,1]
s[,2]
result <- as.data.frame(result)
df <- result[1:length(unique(result$variable)),]
df[,ncol(df)] <- unique(result$variable)
count <- 1
for(x in df[,ncol(df)]) {
sub_result <- result[result$variable == x,]
apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
count <- count + 1
}
d
a
s
colnames(s) <- c('expression', 'cluster')
s
s
seq_along(nrow(df))
nrow(df)
seq_along(1:nrow(df))
df
df[1,]
x <- 1
df[x,]
df[x,]
df
t(df[x,1:sum(ncol(df)-1)])
tmp <- t(df[1,1:sum(ncol(df)-1)])
tmp[,2] <- df[1,ncol(df)]
df[1,ncol(df)]
tmp
tmp <- cbind(tmp, df[1,ncol(df)])
tmp
tmp <- t(df[1,1:sum(ncol(df)-1)])
tmp <- cbind(tmp, df[1,ncol(df)], rownames(tmp))
tmp
tmp <- t(df[1,1:sum(ncol(df)-1)])
tmp <- cbind(tmp, df[1,ncol(df)])
colnames(tmp) <- c('expression', 'cluster')
tmp
tmp <- data.frame(expression = numeric(), cluster = factor(), percent_expressing = numeric(), gene = character())
tmp
1:sum(ncol(df)-1)
df[x,1:sum(ncol(df)-1)]
tmp[,'expression'] <- df[x,1:sum(ncol(df)-1)]
tmp[ncol(df)-1,'expression'] <- df[x,1:sum(ncol(df)-1)]
tmp[ncol(df)-1,'expression']
tmp
tmp <- data.frame(expression = numeric(), cluster = factor(), percent_expressing = numeric(), gene = character())
tmp
df[x,1:sum(ncol(df)-1)]
tmp[ncol(df)-1,'expression'] <- t(df[x,1:sum(ncol(df)-1)])
tmp
t(df[x,1:sum(ncol(df)-1)])
t(df[x,1:sum(ncol(df)-1)])[,1]
tmp[ncol(df)-1,'expression'] <- t(df[x,1:sum(ncol(df)-1)])[,1]
tmp
t(df[x,1:sum(ncol(df)-1)])[,1]
as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp[ncol(df)-1,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp <- data.frame(expression = numeric(), cluster = factor(), percent_expressing = numeric(), gene = character())
ncol(df)-1
count <- 0
count
count + 1
count2 <- ncol(df)-1
count2
count <- count + ncol(df)-1
count
count <- 0
count <- count + ncol(df)
count2 <- ncol(df)-1
count2
count
count <- 0
count2 <- ncol(df)-1
count <- count + ncol(df)
count2 <- count2 + ncol(df)
count
count2
count <- 0
count2 <- ncol(df)-1
count <- count + ncol(df)
count2 <- count2 + ncol(df)-1
count
count2
count <- 0
count2 <- ncol(df)-1
tmp <- data.frame(expression = numeric(), cluster = factor(), percent_expressing = numeric(), gene = character())
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp
tmp[sum(count + 1):count2,'expression'] <- as.factor(x)
tmp
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp[sum(count + 1):count2,'cluster'] <- as.factor(x)
tmp
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
tmp[]
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp
df
colnames(df)[count:count2]
colnames(df)[1:sum(ncol(df)-1)]
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
df
t(df)
e <- t(df)
e
colnames(e) <- e[,5]
3[,5]
e[,5]
e[5,]
colnames(e) <- e[5,]
e
sub_result
colSums(sub_result$CD79A != 0)
sub_result$CD79A != 0
Matrix::colSums(sub_result$CD79A != 0)
Matrix::rowSums(sub_result$CD79A != 0)
Matrix::rowSums(sub_result$CD79A != 0)
sub_result
sub_result$CD79A
sum(sub_result$CD79A != 0)
sum(sub_result$CD79A == 0)
sum(sub_result$CD79A != 0)/sum(sub_result$CD79A == 0)
sum(sum(sub_result$CD79A != 0)/sum(sub_result$CD79A == 0))*100
sum(sum(sub_result$CD79A == 0)/sum(sub_result$CD79A != 0))*100
sum(sub_result$CD79A == 0)/length(sub_result$CD79A)
sum(sub_result$CD79A == 0)/length(sub_result$CD79A)*100
sum(sub_result$CD79A != 0)/length(sub_result$CD79A)*100
calc_nonzero <- function(x) {
sum(sum(x != 0)/length(x))*100
}
calc_nonzero(x = )
calc_nonzero(x = sub_result$CD79A)
rm(calc_nonzero)
df2 <- df[,ncol(df)]
df2
df
expr <- object@methods[[assay]][[slot]]
assignment <- object@methods[[assay]]@cluster_assignments[[clust.method]]
expr <- as.matrix(expr[,match(x = colnames(expr), table = rownames(assignment))])
features <- features[features %in% rownames(expr)]
expr <- t(expr[features,])
old.names <- colnames(expr)
result <- cbind(expr, assignment[,column])
colnames(result) <- c(old.names, 'variable')
result <- as.data.frame(result)
df <- result[1:length(unique(result$variable)),]
df[,ncol(df)] <- unique(result$variable)
df
df2 <- df
df2
count <- 1
expr <- object@methods[[assay]][[slot]]
assignment <- object@methods[[assay]]@cluster_assignments[[clust.method]]
expr <- as.matrix(expr[,match(x = colnames(expr), table = rownames(assignment))])
features <- features[features %in% rownames(expr)]
expr <- t(expr[features,])
old.names <- colnames(expr)
result <- cbind(expr, assignment[,column])
colnames(result) <- c(old.names, 'variable')
result <- as.data.frame(result)
df <- result[1:length(unique(result$variable)),]
df[,ncol(df)] <- unique(result$variable)
df2 <- df
count <- 1
calc_nonzero <- function(x) {
sum(sum(x != 0)/length(x))*100
}
for(d in df[,ncol(df)]) {
sub_result <- result[result$variable == d,]
apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df2[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = calc_nonzero)
count <- count + 1
}
df2
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
x
as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
count <- count + ncol(df)
count2 <- count2 + ncol(df)-1
}
df
df2
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
print('.')
count <- count + ncol(df)
count2 <- count2 + ncol(df)-1
}
x
as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
as.character(x)
colnames(df)[1:sum(ncol(df)-1)]
as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
print(x)
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
print('.')
count <- count + ncol(df)
count2 <- count2 + ncol(df)-1
}
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
print(x)
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
print('.')
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
print('.')
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
print('.')
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
print('.')
count <- count + ncol(df)
count2 <- count2 + ncol(df)-1
}
count
tmp
count
count2
tmp[sum(count + 1):count2,'expression']
tmp[sum(count + 1):count2,'expression']
count2
tmp[1:5,]
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)
for(x in seq_along(1:nrow(df))) {
print(x)
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
print('.')
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
print('.')
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
print('.')
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
print('.')
count <- count + ncol(df)
count2 <- count2 + ncol(df)
}
tmp
count
count2
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
print(x)
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
print('.')
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
print('.')
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
print('.')
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
print('.')
count <- count + ncol(df)
count2 <- count2 + ncol(df)-1
}
tmp
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
print(count)
print(count2)
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
print('.')
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
print('.')
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
print('.')
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
print('.')
count <- count + ncol(df)
count2 <- count2 + ncol(df)-1
}
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
print(count)
print(count2)
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
print('.')
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
print('.')
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
print('.')
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
print('.')
count <- count + ncol(df)-1
count2 <- count2 + ncol(df)-1
}
tmp
ggplot2::ggplot(data = tmp, mapping = ggplot2::aes(x = cluster, y = gene, col = expression, size = percent_expressing)) + ggplot2::geom_point()
ggplot2::ggplot(data = tmp, mapping = ggplot2::aes(x = cluster, y = gene, col = expression, size = percent_expressing)) + ggplot2::geom_point() + ggplot2::theme_classic()
ggplot2::ggplot(data = tmp, mapping = ggplot2::aes(x = cluster, y = gene, col = expression, size = percent_expressing)) + ggplot2::geom_point() + ggplot2::theme_classic() + ggplot2::scale_color_gradient()
ggplot2::ggplot(data = tmp, mapping = ggplot2::aes(x = cluster, y = gene, col = expression, size = percent_expressing)) + ggplot2::geom_point() + ggplot2::theme_classic() + ggplot2::scale_color_gradient(low = 'gray93', high = 'mediumorchid1')
ggplot2::ggplot(data = tmp, mapping = ggplot2::aes(x = cluster, y = gene, col = expression, size = percent_expressing)) + ggplot2::geom_point() + ggplot2::theme_classic() + ggplot2::scale_color_gradient(low = 'gray93', high = 'mediumorchid4')
plot.dot.plot <- function(object, assay, slot='normalised', clust.method, column, features) {
expr <- object@methods[[assay]][[slot]]
assignment <- object@methods[[assay]]@cluster_assignments[[clust.method]]
expr <- as.matrix(expr[,match(x = colnames(expr), table = rownames(assignment))])
features <- features[features %in% rownames(expr)]
expr <- t(expr[features,])
old.names <- colnames(expr)
result <- cbind(expr, assignment[,column])
colnames(result) <- c(old.names, 'variable')
result <- as.data.frame(result)
df <- result[1:length(unique(result$variable)),]
df[,ncol(df)] <- unique(result$variable)
df2 <- df
count <- 1
calc_nonzero <- function(x) {
sum(sum(x != 0)/length(x))*100
}
for(d in df[,ncol(df)]) {
sub_result <- result[result$variable == d,]
apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df2[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = calc_nonzero)
count <- count + 1
}
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
tmp[sum(count + 1):count2,'expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp[sum(count + 1):count2,'cluster'] <- as.character(x)
tmp[sum(count + 1):count2,'gene'] <- colnames(df)[1:sum(ncol(df)-1)]
tmp[sum(count + 1):count2,'percent_expressing'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
count <- count + ncol(df)-1
count2 <- count2 + ncol(df)-1
}
ggplot2::ggplot(data = tmp, mapping = ggplot2::aes(x = cluster, y = gene, col = expression, size = percent_expressing)) +
ggplot2::geom_point() +
ggplot2::theme_classic() +
ggplot2::scale_color_gradient(low = 'gray93', high = 'mediumorchid4')
}
ls()
plot.dot.plot(object = sample, assay = 'SCT', clust.method = 'pca_seurat_louvain', column = 'neighbourhood_graph_res.0.6', features = c('CD79A','CD79B','BIRC5','TOP2A'))
plot.dot.plot <- function(object, assay, slot='normalised', clust.method, column, features) {
expr <- object@methods[[assay]][[slot]]
assignment <- object@methods[[assay]]@cluster_assignments[[clust.method]]
expr <- as.matrix(expr[,match(x = colnames(expr), table = rownames(assignment))])
features <- features[features %in% rownames(expr)]
expr <- t(expr[features,])
old.names <- colnames(expr)
result <- cbind(expr, assignment[,column])
colnames(result) <- c(old.names, 'variable')
result <- as.data.frame(result)
df <- result[1:length(unique(result$variable)),]
df[,ncol(df)] <- unique(result$variable)
df2 <- df
count <- 1
calc_nonzero <- function(x) {
sum(sum(x != 0)/length(x))*100
}
for(d in df[,ncol(df)]) {
sub_result <- result[result$variable == d,]
apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df2[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = calc_nonzero)
count <- count + 1
}
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
tmp[sum(count + 1):count2,'gene expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp[sum(count + 1):count2,'cluster assignments'] <- as.character(x)
tmp[sum(count + 1):count2,'genes'] <- colnames(df)[1:sum(ncol(df)-1)]
tmp[sum(count + 1):count2,'percentage of cells (%)'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
count <- count + ncol(df)-1
count2 <- count2 + ncol(df)-1
}
ggplot2::ggplot(data = tmp, mapping = ggplot2::aes(x = cluster, y = gene, col = expression, size = percent_expressing)) +
ggplot2::geom_point() +
ggplot2::theme_classic() +
ggplot2::scale_color_gradient(low = 'gray93', high = 'mediumorchid4')
}
plot.dot.plot(object = sample, assay = 'SCT', clust.method = 'pca_seurat_louvain', column = 'neighbourhood_graph_res.0.6', features = c('CD79A','CD79B','BIRC5','TOP2A'))
plot.dot.plot <- function(object, assay, slot='normalised', clust.method, column, features) {
expr <- object@methods[[assay]][[slot]]
assignment <- object@methods[[assay]]@cluster_assignments[[clust.method]]
expr <- as.matrix(expr[,match(x = colnames(expr), table = rownames(assignment))])
features <- features[features %in% rownames(expr)]
expr <- t(expr[features,])
old.names <- colnames(expr)
result <- cbind(expr, assignment[,column])
colnames(result) <- c(old.names, 'variable')
result <- as.data.frame(result)
df <- result[1:length(unique(result$variable)),]
df[,ncol(df)] <- unique(result$variable)
df2 <- df
count <- 1
calc_nonzero <- function(x) {
sum(sum(x != 0)/length(x))*100
}
for(d in df[,ncol(df)]) {
sub_result <- result[result$variable == d,]
apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = mean)
df2[count,1:sum(ncol(df)-1)] <- apply(X = sub_result[,1:ncol(sub_result)-1], MARGIN = 2, FUN = calc_nonzero)
count <- count + 1
}
tmp <- data.frame(expression = numeric(), cluster = character(), percent_expressing = numeric(), gene = character())
count <- 0
count2 <- ncol(df)-1
for(x in seq_along(1:nrow(df))) {
tmp[sum(count + 1):count2,'gene expression'] <- as.numeric(t(df[x,1:sum(ncol(df)-1)])[,1])
tmp[sum(count + 1):count2,'cluster assignments'] <- as.character(x)
tmp[sum(count + 1):count2,'genes'] <- colnames(df)[1:sum(ncol(df)-1)]
tmp[sum(count + 1):count2,'percentage of cells (%)'] <- as.numeric(t(df2[x,1:sum(ncol(df2)-1)])[,1])
count <- count + ncol(df)-1
count2 <- count2 + ncol(df)-1
}
ggplot2::ggplot(data = tmp, mapping = ggplot2::aes(x = `cluster assignments`, y = genes, col = `gene expression`, size = `percentage of cells (%)`)) +
ggplot2::geom_point() +
ggplot2::theme_classic() +
ggplot2::scale_color_gradient(low = 'gray93', high = 'mediumorchid4')
}
plot.dot.plot(object = sample, assay = 'SCT', clust.method = 'pca_seurat_louvain', column = 'neighbourhood_graph_res.0.6', features = c('CD79A','CD79B','BIRC5','TOP2A'))
devtools::install_github(repo = 'connorhknight/IBRAP')
plot.dot.plot(object = sample, assay = 'SCT', clust.method = 'pca_seurat_louvain', column = 'neighbourhood_graph_res.0.6', features = c('CD79A','CD78','BIRC5','TOP2A', 'CD19', 'CD27'))
plot.dot.plot(object = sample, assay = 'SCT', clust.method = 'pca_seurat_louvain', column = 'neighbourhood_graph_res.0.6', features = c('CD79A','CD78','BIRC5','TOP2A', 'CD19', 'CD27','CXCR3'))
plot.dot.plot(object = sample, assay = 'SCT', clust.method = 'pca_seurat_louvain', column = 'neighbourhood_graph_res.0.6', features = c('CD79A','CD78','BIRC5','TOP2A', 'CD19', 'CD27','CXCR4'))
plot.dot.plot(object = sample, assay = 'SCT', clust.method = 'pca_seurat_louvain', column = 'neighbourhood_graph_res.0.6', features = c('CD79A','CD78','BIRC5','TOP2A', 'CD19', 'CD27','CXCR4', 'CD21','CD22','CD23'))
ls()
sample
