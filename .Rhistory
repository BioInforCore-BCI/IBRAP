if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
}
} else {
plot.list[1]
}
}
+
scale_color_gradient(low = '#FFFF00', high = '#FF0000')
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features <- function(object,
assay,
slot,
reduction,
features) {
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
iso <- object@methods[[assay]][[slot]][x,]
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature)) +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
print(TRUE)
} else {
print(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
}
} else {
plot.list[1]
}
} else if(is.even(length(plot.list))){
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
}
} else {
plot.list[1]
}
}
}
+
scale_color_gradient(low = '#FFFF00', high = '#FF0000')
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features <- function(object,
assay,
slot,
reduction,
features) {
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
iso <- object@methods[[assay]][[slot]][x,]
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature)) +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
print(TRUE)
} else {
print(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
}
print('.')
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
}
} else {
plot.list[1]
}
}
+
scale_color_gradient(low = '#FFFF00', high = '#FF0000')
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features <- function(object,
assay,
slot,
reduction,
features) {
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
iso <- object@methods[[assay]][[slot]][x,]
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature)) +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
print(TRUE)
} else {
print(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
}
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
} else {
do.call('ggarrange.tmp', c(plots = plot.list)
}
} else {
plot.list[1]
}
}
+
scale_color_gradient(low = '#FFFF00', high = '#FF0000')
plot.features <- function(object,
assay,
slot,
reduction,
features) {
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
iso <- object@methods[[assay]][[slot]][x,]
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature)) +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
print(TRUE)
} else {
print(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
}
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
} else {
do.call('ggarrange.tmp', c(plots = plot.list))
}
} else {
plot.list[1]
}
}
+
scale_color_gradient(low = '#FFFF00', high = '#FF0000')
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features <- function(object,
assay,
slot,
reduction,
features) {
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
iso <- object@methods[[assay]][[slot]][x,]
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature)) +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
}
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
} else {
do.call('ggarrange.tmp', c(plots = plot.list))
}
} else {
plot.list[1]
}
}
+
scale_color_gradient(low = '#FFFF00', high = '#FF0000')
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features <- function(object,
assay,
slot,
reduction,
features) {
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
iso <- object@methods[[assay]][[slot]][x,]
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature))+
scale_color_gradient(low = '#C0C0C0', high = '#87CEFA') +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
}
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
} else {
do.call('ggarrange.tmp', c(plots = plot.list))
}
} else {
plot.list[1]
}
}
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features <- function(object,
assay,
slot,
reduction,
features) {
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
iso <- object@methods[[assay]][[slot]][x,]
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature))+
ggplot2::scale_color_gradient(low = '#C0C0C0', high = '#87CEFA') +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
}
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
} else {
do.call('ggarrange.tmp', c(plots = plot.list))
}
} else {
plot.list[1]
}
}
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features <- function(object,
assay,
slot,
reduction,
features) {
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
iso <- object@methods[[assay]][[slot]][x,]
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature))+
ggplot2::scale_color_gradient(low = '#C0C0C0', high = '#4169E1') +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
}
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
} else {
do.call('ggarrange.tmp', c(plots = plot.list))
}
} else {
plot.list[1]
}
}
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
#' @name plot.features
#' @aliases plot.features
#'
#' @title Plot of reduced dimensions and features
#'
#' @param object An IBRAP S4 class object
#' @param reduction Character. Which reduction to use to display points
#' @param assay Character. Which assay within the object to access
#' @param clust.method Character. Which clustering method to access, supply the name of any dataframe contained in the cluster_assignments sections. If you wish to access metadata, just specify 'metadata'
#' @param column Character. Which column to access within the supplied clust.column
#' @param pt.size Numeric. What should the point size be
#' @param cells Numeric. Which cells should be subset for plotting, Default = NULL
#'
#' @return A plot of reduced dimensions annotated with assignments
#'
#' @export plot.reduced.dim
plot.features <- function(object,
assay,
slot,
reduction,
features,
pt_size = 5,
cells = NULL) {
if(!is(object = object, class2 = 'IBRAP')) {
stop('object must be of class IBRAP\n')
}
if(!is.character(reduction)) {
stop('reduction must be character string\n')
}
if(!assay %in% names(object@methods)) {
stop('assay does not exist\n')
}
if(!reduction %in% names(c(object@methods[[assay]]@computational_reductions,
object@methods[[assay]]@visualisation_reductions,
object@methods[[assay]]@integration_reductions))) {
stop('reduction does not exist\n')
}
if(!is.character(features)) {
stop('features must be character string \n')
}
ggarrange.tmp <- function(...) {
egg::ggarrange(...)
}
plot.list <- list()
for(x in features) {
results <- as.data.frame(object@methods[[assay]]@visualisation_reductions[[reduction]])[,1:2]
orig.colnames <- colnames(object@methods[[assay]]@visualisation_reductions[[reduction]][,1:2])
if(is.null(object@methods[[assay]][[slot]][x,])) {
cat(crayon::cyan(paste0(Sys.time(), ': feature ', x, ' was not present in the defined assay, resorting to counts matrix', '\n')))
iso <- object@methods[[1]]@counts[x,]
} else {
iso <- object@methods[[assay]][[slot]][x,]
}
colnames(results) <- c('red_1', 'red_2')
results[,x] <- iso
colnames(results)[3] <- 'feature'
if(!is.null(cells)) {
results <- results[cells,]
}
plot.list[[x]] <- ggplot2::ggplot(data = results[order(results$feature),],
ggplot2::aes(x = red_1, y = red_2)) +
ggplot2::geom_point(ggplot2::aes(color=feature), size = pt.size)+
ggplot2::scale_color_gradient(low = '#C0C0C0', high = '#4169E1') +
ggplot2::theme_classic() + ggplot2::labs(title=x, x=orig.colnames[1], y=orig.colnames[2]) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = 'bold', size = 10))
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + ggplot2::geom_blank()
}
if(length(plot.list) > 1){
if(length(plot.list) <3) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
do.call('ggarrange.tmp', c(plots = plot.list, ncol = 3, nrow = 2))
} else {
do.call('ggarrange.tmp', c(plots = plot.list))
}
} else {
plot.list[1]
}
}
plot.features(object = pancreas_bench, assay = 'SCT', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features(object = pancreas_bench, assay = 'SCRAN', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
plot.features(object = pancreas_bench, assay = 'SCANPY', slot = 'normalised', reduction = 'pca_bbknn_diffmap_umap', features = c('MAFA', 'MAFB', 'GCG', 'INS', 'SST', 'PPY', 'PRSS1', 'KRT19', 'ESM1'))
quantile(pancreas@methods$SCT@normalised['MAFA',])
quantile(pancreas@methods$SCT@normalised['MAFB',])
getwd()
saveRDS(object = pancreas_bench, file = '~/Desktop/Pancreas_01_07_2021.RData', compress = T)
object.size(pancreas@methods$SCT@cluster_assignments)
object.size(pancreas@methods$SCT)
