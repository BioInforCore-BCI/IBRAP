results <- cbind(sil.results, dunn.results, conn.results)
rownames(results) <- colnames(all.clusters)
colnames(results) <- c(paste0(x, '_sil.results'), paste0(x, '_dunn.results'), paste0(x, '_conn.results'))
metadata(object)[['benchmarking_clustering']][[as.character(x)]] <- results
}
}
return(object)
}
pancreas.test <- benchmark.clustering(object = pancreas,
components = 1:3,
reduction = 'umap',
dist.method = 'euclidean',
ground.truth = pancreas$celltype)
rm(test)
rm(max.features, med.value, names, sd.value, which.assay, x)
anndata <- reticulate::import('anndata', convert = FALSE)
anndata
rm(clusters, g, pancreas)
save.image("~/Results/scRNA-seq/IBRAP_development/Example_processed_results/pancreas_2.RData")
source('~/Results/scRNA-seq/IBRAP_development/IBRAP/R/IBRAP_full_code.R')
load("~/Results/scRNA-seq/IBRAP_development/Example_processed_results/pancreas_2.RData")
anndata
anndata <- reticulate::import('anndata')
anndata
sc <- reticulate::import('scanpy')
sc
sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), obs = as.data.frame(colData(pancreas.test)), var = as.data.frame(rowData(pancreas.test)))
as.data.frame(rowData(pancreas.test))
sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), obs = as.data.frame(colData(pancreas.test)))
scobj <- sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), obs = as.data.frame(colData(pancreas.test)))
sc$pl$highest_expr_genes(scobj, n_top = 20)
sc$pl$highest_expr_genes(scobj, n_top = as.integer(20))
scobj$raw
scobj$X
t(assay(pancreas.test, 'decontXcounts'))
scobj$X
colnames(scobj$X) <- rownames(pancreas.test)
rownames(scobj$X) <- colnames(pancreas.test)
scobj$X
reticulate::r_to_py(assay(pancreas.test, 'decontXcounts'))
reticulate::py_to_r(reticulate::r_to_py(assay(pancreas.test, 'decontXcounts')))
scobj$X[,1:5]
scobj$X[,rownames(pancreas.test)]
pd <- reticulate::import('pandas')
pd
?reticulate::r_to_py
d <- reticulate::r_to_py(assay(pancreas.test, 'decontXcounts'))
d
d$rename
clasS(d)
class(d)
pd$array(data = d)
pd$DataFrame(data = d)
f <- pd$DataFrame(data = d)
d
f
class(f)
f$columns
f$columns()
f$columns <- colnames(pancreas.test)
f$columns <- rownames(pancreas.test)
f$rowss <- colnames(pancreas.test)
f
View(f)
sc$AnnData(X = f)
sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), var = as.data.frame(colData(pancreas.test)), obs_names = colnames(pancreas.test))
mm <- sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), var = as.data.frame(colData(pancreas.test)))
mm <- sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), var = as.data.frame(rowData(pancreas.test)))
mm <- sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), obs = as.data.frame(colData(pancreas.test)))
mm
mm$obs_names <- colnames(pancreas.test)
mm$obs_names
mm$var_names <- rownames(pancreas.test)
mm$X
sc$pl$highest_expr_genes(adata = mm, n_top = as.integer(20))
sc$pp$normalize_total(adata = mm, target_sum = 1e4)
g <- sc$pp$normalize_total(adata = mm, target_sum = 1e4)
g
g <- sc$pp$normalize_total(adata = mm)
mm
mm$X
g <- sc$pp$normalize_total(adata = mm$X)
g <- sc$pp$normalize_total(adata = mm)
g
c$pp$normalize_total(adata = mm)
c$pp$normalize_total(adata = mm)
class(mm$X)
scobj
scobj$obs_names <- colnames(pancreas.test)
scobj
scobj$obs_names
scobj$var_names <- rownames(pancreas.test)
sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
h <- sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
h
reticulate::py_module_available()
reticulate::py_module_available('scanpy')
reticulate::py_module_available()
h <- sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
rm(sc)
sc <- reticulate::import('scanpy')
sc <- reticulate::import('scanpy', convert = FALSE)
sc
sc$pp$normalize_total(adata = scobj)
sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
reticulate::r_to_py(scobj)
x <- reticulate::r_to_py(scobj)
rm(x)
sc$pp$normalize_total(adata = reticulate::r_to_py(scobj), target_sum = 1e6)
scobj <- sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), obs = as.data.frame(colData(pancreas.test)))
sc$pp$normalize_total(adata = reticulate::r_to_py(scobj), target_sum = 1e6)
sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
scobj
sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
sc$pp$normalize_total(adata = scobj)
scobj$obs_names <- as.factor(colnames(pancreas.test))
scobj$var_names <- as.factor(rownames(pancreas.test))
sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
sc <- reticulate::import('scanpy')
sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
scobj$X
sc$pp$log1p(scobj)
scobj$X
sc$pp$highly_variable_genes(adata = scobj, min_disp = 0.5, max_mean = 3, min_mean = 0.0125)
sc$pl$highly_variable_genes(scobj)
sc$pp$highly_variable_genes(adata = scobj, min_disp = 0.5, max_mean = 6, min_mean = 0.0125)
sc$pp$highly_variable_genes(adata = scobj, min_disp = 0.5, max_mean = 6, min_mean = 0.0125)
sc$pl$highly_variable_genes(scobj)
scobj$raw
scobj
scobj[:,scobj$var$highly_variable]
scobj[,scobj$var$highly_variable]
scobj$var$highly_variable
scobj[scobj$var$highly_variable,]
scobj[:,scobj$var$highly_variable]
as.factor(scobj$var$highly_variable)
scobj$var$highly_variable
reticulate::py_to_r(scobj$var$highly_variable)
varfeat <- reticulate::py_to_r(scobj$var$highly_variable)
varfeat
varfeat[varfeat==TRUE]
unlist(varfeat[varfeat==TRUE])
names(varfeat[varfeat==TRUE])
sc$pp$normalize_total(adata = scobj, target_sum = 1e6, inplace = FALSE)
p <- sc$pp$normalize_total(adata = scobj, target_sum = 1e6, inplace = FALSE)
p$norm_factor
p$X
sc.pp.log1p(p$X)
sc$pp$log1p(p$X)
scobj$X
reticulate::py_to_r(scobj$X)
mat <- t(reticulate::py_to_r(scobj$X))
mat
sc$pp$highly_variable_genes(adata = scobj, min_disp = 0.5, max_mean = 6, min_mean = 0.0125, batch_key = 'tech')
scobj$var
scobj$var$highly_variable
reticulate::py_to_R(scobj$var$highly_variable)
reticulate::py_to_r(scobj$var$highly_variable)
unlist(reticulate::py_to_r(scobj$var$highly_variable))
reticulate::py_to_r(scobj$var$highly_variable)
vargenes <- reticulate::py_to_r(scobj$var$highly_variable)
vargenes <- vargenes[vargenes == TRUE]
names(vargenes)
names(metadata(pancreas.test))
sc$pp$scale(scobj, zero_center = zero_center)
sc$pp$scale(scobj, zero_center = as.logical(TRUE))
sc$pp$scale(scobj, zero_center = as.logical(TRUE), obsm = 'None')
scobj
scobj$X
scobj <- sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')), obs = as.data.frame(colData(pancreas.test)))
sc$pp$normalize_total(adata = scobj, target_sum = 1e6)
scobj$X
scobj
sc$pp$normalize_total(adata = scobj, target_sum = 1e6, key_added = as.character('cpm_norm_factor'))
scobj
scobj$obsm
scobj$obs
sc$pp$log1p(scobj)
sc$pp$highly_variable_genes(adata = scobj,
n_top_genes = as.integer(2000),
min_mean = as.integer(0.0125),
max_mean = as.integer(6),
min_disp = as.integer(0.5),
span = as.integer(0.3),
n_bins = as.integer(20),
flavor = as.character('seurat'),
batch_key = as.character('tech'))
scobj
sc$pp$regress_out(adata = scobj, keys = [c('decontXcounts_total.counts', 'decontXcounts_percent.mt')], n_jobs = as.integer(4))
sc$pp$regress_out(adata = scobj, keys = [('decontXcounts_total.counts', 'decontXcounts_percent.mt')], n_jobs = as.integer(4))
sc$pp$regress_out(adata = scobj, keys = c('decontXcounts_total.counts', 'decontXcounts_percent.mt'), n_jobs = as.integer(4))
sc$pp$scale(scobj)
sc$tl$pca(scobj)
sc$pl$pca_variance_ratio(scobj, log=TRUE)
sc$external$pp$bbknn(scobj, batch_key = 'tech')
scobj
sc.pp.pca(scobj)
sc.pp.neighbors(scobj)
sc.tl.umap(scobj)
sc$pp$pca(scobj)
sc$pp$neighbors(scobj)
sc$tl$umap(scobj)
sc$pl$umap(scobj, color=['tech', 'celltype'], palette=sc.pl.palettes.vega_20_scanpy)
sc$pl$umap(scobj, color=c('tech', 'celltype'), palette=sc.pl.palettes.vega_20_scanpy)
sc$pl$umap(scobj, color=c('tech', 'celltype'), palette=sc$pl$palettes.vega_20_scanpy)
sc$pl$umap(scobj, color=c('tech', 'celltype'), palette=sc$pl$palettes$vega_20_scanpy)
sc.external.pp.bbknn(scobj, batch_key='tech')
sc$external$pp$bbknn(scobj, batch_key='tech')
sc$tl$umap(scobj)
sc$pl$umap(scobj, color=c('tech', 'celltype'))
scobj
ppp <- sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')))
scobj.old <- scobj.old
scobj.old <- scobj
scobj <- sc$AnnData(X = t(assay(pancreas.test, 'decontXcounts')))
scobj.old
scobj.old$obsm$items
scobj.old$obsm$items$X_pca
scobj.old$obsm$items['x_pca']
scobj.old$obsm$items[['x_pca']]
scobj.old$obsm$items('x_pca')
scobj.old$obsm$values
scobj.old$obsm$keys
scobj.old$obsm$keys
scobj.old$obsm
scobj.old$obsm[['x_pca']]
scobj.old$obsm[['X_pca']]
class(scobj.old$obsm[['X_pca']])
scobj$obs_names <- as.factor(colnames(pancreas.test))
scobj$var_names <- as.factor(rownames(pancreas.test))
scobj$obsm[['X_pca']] <- reducedDim(pancreas.test, 'decontXcounts')
reducedDimNames(pancreas.test)
scobj$obsm[['X_pca']] <- reducedDim(pancreas.test, 'uncorrected_pca')
scobj$obsm[['X_pca']]
scobj$obsm[['X_pca']]
scobj$obsm[['X_pca']]
scobj$obsm
scobj$obsm$update(pca = reducedDim(pancreas.test, 'uncorrected_pca'))
scobj
scobj$obs <- as.data.frame(colData(pancreas.test))
scobj$obsm
scobj$obsm[['pca']]
sc$external$pp$bbknn(adata = scobj, batch_key = 'tech')
scobj$obsm$update(X_pca = reducedDim(pancreas.test, 'uncorrected_pca'))
sc$external$pp$bbknn(adata = scobj, batch_key = 'tech')
scobj$obsm[['X_pca']]
scobj
scobj$obsp
scobj$obsp$keys
scobj$obsp[['distances']]
scobj$obsp$keys
scobj$obsp[['connectivities']]
dim(scobj$obsp[['connectivities']])
View(scobj$obsp[['connectivities']])
View(as.matrix(scobj$obsp[['connectivities']]))
View(as.matrix(scobj$obsp[['distances']]))
library(Seurat)
ppp <- as.Seurat(pancreas.test, counts = 'decontXcounts', data = 'sctransform')
ppp
ppp@assays$RNA@meta.features
ppp@assays$RNA@misc
ppp@graphs
pp <- FindNeighbors(object = ppp)
pp <- FindNeighbors(object = ppp, reduction = 'uncorrected_pca', dims = 1:20)
pp@graphs
pp@neighbors
as.Graph(scobj$obsp[['connectivities']])
as.Graph(as.matrix(scobj$obsp[['connectivities']]))
d <- as.matrix(scobj$obsp[['connectivities']])
d
colnames(d) <- colnames(pancreas.test)
rownames(d) <- colnames(pancreas.test)
d
as.Graph(d)
View(as.Graph(d))
seuobj[['bbknn']] <- as.Graph(d)
ppp[['bbknn']] <- as.Graph(d)
ppp@graphs
uwot::umap(X = d)
pancreas.test
SingleCellExperiment
SingleCellExperiment
source('~/Results/scRNA-seq/IBRAP_development/IBRAP/R/IBRAP_full_code.R')
plot.features <- function(object,
reduction='',
pt.size=10,
assay,
feature,
dimensions) {
results <- as.data.frame(reducedDim(object, reduction))[,1:3]
print(dimensions)
iso <- assay(object, assay)[feature,]
print('.')
results[,feature] <- iso
print('.')
colnames(results)[4] <- 'feature'
print('.')
if(dimensions == 3){
print('3')
p <- plotly::plot_ly(data = results[order(results$feature),],
x = as.formula(paste0('~', colnames(results)[1])),
y = as.formula(paste0('~', colnames(results)[2])),
z = as.formula(paste0('~', colnames(results)[3])),
color = as.formula(paste0('~',colnames(results)[4])),
mode = "markers", colors = RColorBrewer::brewer.pal(n = 9, name = 'Blues')[3:9],
marker = list(size = 5, width=5),
text=as.formula(paste0('~',colnames(results)[4])),
hoverinfo="text", plot_bgcolor = 'black')
p <- p %>% layout(title=feature)
print(p)
}
if (dimensions == 2) {
print('2')
p <- plotly::plot_ly(data = results[order(results$feature),],
x = as.formula(paste0('~', colnames(results)[1])),
y = as.formula(paste0('~', colnames(results)[2])),
color = as.formula(paste0('~',colnames(results)[4])),
mode = "markers",
colors = RColorBrewer::brewer.pal(n = 9, name = 'Blues')[3:9],
marker = list(size = 5, width=5),
text=as.formula(paste0('~',colnames(results)[4])),
hoverinfo="text", plot_bgcolor = 'black')
p <- p %>% layout(title=feature)
print(p)
}
}
plot.features.multiple <- function(object,
assay,
reduction,
lab.key,
features) {
plot.list <- list()
for(x in features) {
print('1')
results <- as.data.frame(reducedDim(object, reduction))[,1:2]
print('2')
print(assay)
iso <- assay(object, assay)[x,]
print('3')
colnames(results) <- c('red_1', 'red_2')
print('4')
results[,x] <- iso
print('5')
colnames(results)[3] <- 'feature'
print('6')
plot.list[[x]] <- ggplot(data = results[order(results$feature),], aes(x = red_1, y = red_2)) +
geom_point(aes(color=feature)) +
scale_color_gradient(low = '#C6DBEF', high = '#08306B') +
theme_bw() + labs(title=x, x=paste0(lab.key,'_1'), y=paste0(lab.key,'_2')) +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 10))
print('7')
}
is.even <- function(x) {
if(as.integer(x %% 2) == 0) {
print(TRUE)
} else {
print(FALSE)
}
}
if(!is.even(length(plot.list))) {
plot.list[length(plot.list)+1] <- plot.list[1] + geom_blank()
}
if(length(plot.list) > 1){
print('multi')
if(length(plot.list) <3) {
print('1x2')
do.call('ggarrange', c(plots = plot.list, ncol = 1, nrow = 2))
} else if(length(plot.list) <5) {
print('2x2')
do.call('ggarrange', c(plots = plot.list, ncol = 2, nrow = 2))
} else if(length(plot.list) <7) {
print('3x2')
do.call('ggarrange', c(plots = plot.list, ncol = 3, nrow = 2))
}
} else {
print('single')
plot.list[1]
}
}
plot.barplot <- function(object,
x.value,
y.value) {
object[['var']] <- y.value
object[['group']] <- x.value
print(dittoSeq::dittoBarPlot(object = object, var = 'var', group.by = 'group') + labs(title='') + ggplot2::scale_fill_hue())
}
plot.benchmarking <- function(object,
clust.method,
ARI){
print('.')
clust.bench <- metadata(object)[['benchmarking_clustering']][[as.character(clust.method)]]
print('.')
clust.bench <- as.data.frame(clust.bench)
print(clust.bench)
clust.bench[,'cluster_index'] <- rownames(clust.bench)
if(ARI == TRUE) {
labels <- c('ASW', 'Dunn_index', 'Connectivity', 'ARI', 'NMI', 'cluster_index')
} else {
labels <- c('ASW', 'Dunn_index', 'Connectivity', 'cluster_index')
}
colnames(clust.bench) <- labels
print(clust.bench)
list.plot <- list()
for(o in 1:sum(length(labels)-2)) {
label <- labels[as.numeric(o)]
print(label)
fig <- ggplot(clust.bench, aes_string(x = 'cluster_index', y = as.character(label), group = 1)) +
geom_point() +
geom_line() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
list.plot[[as.numeric(o)]] <- fig
}
last.label <- labels[as.numeric(sum(length(labels)-1))]
last.fig <- fig <- ggplot(clust.bench, aes_string(x = 'cluster_index', y = as.character(last.label), group = 1)) +
geom_point() +
geom_line() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
list.plot[[as.numeric(sum(length(labels)-1))]] <- last.fig
print('/')
do.call('ggarrange', c(plots = list.plot, ncol = 5))
}
plot.heatmap <- function(object,
assay,
features,
...) {
ass <- object[features,]
ass <- assay(ass, assay)
cat(crayon::cyan('Isolated assay\n'))
logged <- log(ass+1)
means <- apply(X = logged, MARGIN = 1, FUN = mean)
standev <- apply(X = logged, MARGIN = 1, FUN = sd)
z_scores <- logged - means / standev
cat(crayon::cyan('z-scores calculated\n'))
p <- gplots::heatmap.2(x = z_scores,
key.title = 'colour key',
key.xlab = 'z-score',
key.ylab = '', xlab = 'cells',
ylab = 'genes', trace = 'none', margins = c(7,7))
p
}
plot.vln <- function(object,
assay,
features,
group.by,
title = NULL,
xlab = 'group',
ylab = 'expression') {
if(!length(group.by) == length(colnames(object))) {
cat(crayon::cyan('group.by variable must match the length of column names in SCE.'))
return(NULL)
}
plot.list <- list()
for(x in features) {
ass <- t(assay(object[x,], assay))
df <- data.frame(groups = colnames(object))
rownames(df) <- df$barcodes
df <- cbind(df, ass)
df[,'groups'] <- group.by
colnames(df) <- c('group', 'feature')
p <- ggplot(data = df, aes(x = group, y = feature, color = group)) +
geom_violin() + geom_jitter(shape=16, position=position_jitter(0.2)) +
theme_light() + labs(title = x, y = 'expression', x = 'group') +
theme(plot.title = element_text(hjust = 0.5, face = 'bold', size = 20))
plot.list[[x]] <- p
}
if(length(plot.list) > 1) {
do.call('ggarrange', c(plots = plot.list, ncol = 1))
} else {
plot.list[1]
}
}
shiny::runApp('Results/scRNA-seq/IBRAP_development/IBRAP/inst/shiny-examples/myapp')
plot.reduced.dim <- function(object,
reduction='',
pt.size=5,
metadata.access='clustering',
sub.access='metadata',
group.by,
dimensions) {
if(is.null(metadata(object)[['clustering']][['metadata']])){
metadata(object)[['clustering']][['metadata']] <- as.data.frame(colData(object))
}
print('plot_cluster_dr_started')
results <- as.data.frame(reducedDim(object, as.character(reduction)))[,1:3]
print('.')
results[,'variable'] <- metadata(object)[[metadata.access]][[sub.access]][[group.by]]
rownames(results) <- colnames(object)
print('.')
if(dimensions == 3) {
print('3')
print(plotly::plot_ly(data = results,
x = as.formula(paste0('~', colnames(results)[1])),
y = as.formula(paste0('~', colnames(results)[2])),
z = as.formula(paste0('~', colnames(results)[3])),
color = as.formula(paste0('~',colnames(results)[4])),
mode = "markers",
marker = list(size = pt.size, width=0.5),
text=as.formula(paste0('~',colnames(results)[4])),
hoverinfo="text", plot_bgcolor = 'black'))
} else if (dimensions == 2) {
print('2')
print(plotly::plot_ly(data = as.data.frame(results),
x = as.formula(paste0('~', colnames(results)[1])),
y = as.formula(paste0('~', colnames(results)[2])),
color = as.formula(paste0('~',colnames(results)[4])),
mode = "markers",
marker = list(size = pt.size, width=0.5),
text=as.formula(paste0('~',colnames(results)[4])),
hoverinfo="text", plot_bgcolor = 'black'))
}
}
runApp('Results/scRNA-seq/IBRAP_development/IBRAP/inst/shiny-examples/myapp')
